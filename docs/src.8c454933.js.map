{"version":3,"sources":["_store.ts","../src/lib/directive.ts","../src/lib/dom.ts","../src/lib/part.ts","../src/lib/template.ts","../src/lib/template-instance.ts","../src/lib/template-result.ts","../src/lib/parts.ts","../src/lib/default-template-processor.ts","../src/lib/template-factory.ts","../src/lib/render.ts","src/lit-html.ts","../src/directives/repeat.ts","../src/directives/class-map.ts","_debounce.ts","_app.ts","index.ts"],"names":[],"mappings":"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","file":"src.8c454933.js","sourceRoot":"../src","sourcesContent":["const KEY = 'time-schedule';\n\nexport interface TsItem {\n  text: string;\n  time: number;\n  checked: boolean;\n}\n\nexport class Store {\n  data: TsItem[];\n  handler: {};\n\n  constructor() {\n    this.data = [];\n    this.handler = {};\n  }\n\n  init() {\n    const storage = localStorage.getItem(KEY);\n    if (storage) {\n      this.data = JSON.parse(storage);\n      this.__format();\n    }\n  }\n\n  get() {\n    return [...this.data];\n  }\n\n  add(data) {\n    this.data.push(data);\n    this.__format();\n    localStorage.setItem(KEY, JSON.stringify(this.data));\n    this.emit('change');\n  }\n\n  remove(idx) {\n    this.data.splice(idx, 1);\n    this.__format();\n    localStorage.setItem(KEY, JSON.stringify(this.data));\n    this.emit('change');\n  }\n\n  update(idx, item) {\n    this.data[idx] = Object.assign(this.data[idx], item);\n    this.__format();\n    localStorage.setItem(KEY, JSON.stringify(this.data));\n    this.emit('change');\n  }\n\n  on(name, fn) {\n    if (!this.handler[name]) {\n      this.handler[name] = [];\n    }\n    this.handler[name].push(fn);\n  }\n\n  emit(name) {\n    this.handler[name].forEach(fn => {\n      fn();\n    });\n  }\n\n  __format() {\n    const now = new Date();\n    this.data = this.data.map(v => {\n      const date = new Date(v.time);\n      date.setFullYear(now.getFullYear());\n      date.setMonth(now.getMonth());\n      date.setDate(now.getDate());\n      return {\n        ...v,\n        time: date.getTime()\n      };\n    });\n\n    this.data = this.data.sort((a, b) => a.time - b.time);\n  }\n}\n\nexport default new Store();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// tslint:disable-next-line:no-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive so that lit-html will call the function\n * during template rendering, rather than passing as a value.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object\n *\n * @example\n *\n * ```\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n * ```\n */\n// tslint:disable-next-line:no-any\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      let node = start;\n      while (node !== end) {\n        const n = node!.nextSibling;\n        container.insertBefore(node!, before as Node);\n        node = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes =\n    (container: Node, startNode: Node|null, endNode: Node|null = null):\n        void => {\n          let node = startNode;\n          while (node !== endNode) {\n            const n = node!.nextSibling;\n            container.removeChild(node!);\n            node = n;\n          }\n        };\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, cause it to actually be written to the DOM.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange: object = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  parts: TemplatePart[] = [];\n  element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n    let index = -1;\n    let partIndex = 0;\n    const nodesToRemove: Node[] = [];\n    const _prepareTemplate = (template: HTMLTemplateElement) => {\n      const content = template.content;\n      // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n      // null\n      const walker = document.createTreeWalker(\n          content,\n          133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n          null,\n          false);\n      // Keeps track of the last index associated with a part. We try to delete\n      // unnecessary nodes, but we never want to associate two different parts\n      // to the same index. They must have a constant node between.\n      let lastPartIndex = 0;\n      while (walker.nextNode()) {\n        index++;\n        const node = walker.currentNode as Element | Comment | Text;\n        if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n          if ((node as Element).hasAttributes()) {\n            const attributes = (node as Element).attributes;\n            // Per\n            // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n            // attributes are not guaranteed to be returned in document order.\n            // In particular, Edge/IE can return them out of order, so we cannot\n            // assume a correspondance between part index and attribute index.\n            let count = 0;\n            for (let i = 0; i < attributes.length; i++) {\n              if (attributes[i].value.indexOf(marker) >= 0) {\n                count++;\n              }\n            }\n            while (count-- > 0) {\n              // Get the template literal section leading up to the first\n              // expression in this attribute\n              const stringForPart = result.strings[partIndex];\n              // Find the attribute name\n              const name = lastAttributeNameRegex.exec(stringForPart)![2];\n              // Find the corresponding attribute\n              // All bound attributes have had a suffix added in\n              // TemplateResult#getHTML to opt out of special attribute\n              // handling. To look up the attribute value we also need to add\n              // the suffix.\n              const attributeLookupName =\n                  name.toLowerCase() + boundAttributeSuffix;\n              const attributeValue =\n                  (node as Element).getAttribute(attributeLookupName)!;\n              const strings = attributeValue.split(markerRegex);\n              this.parts.push({type: 'attribute', index, name, strings});\n              (node as Element).removeAttribute(attributeLookupName);\n              partIndex += strings.length - 1;\n            }\n          }\n          if ((node as Element).tagName === 'TEMPLATE') {\n            _prepareTemplate(node as HTMLTemplateElement);\n          }\n        } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n          const data = (node as Text).data!;\n          if (data.indexOf(marker) >= 0) {\n            const parent = node.parentNode!;\n            const strings = data.split(markerRegex);\n            const lastIndex = strings.length - 1;\n            // Generate a new text node for each literal section\n            // These nodes are also used as the markers for node parts\n            for (let i = 0; i < lastIndex; i++) {\n              parent.insertBefore(\n                  (strings[i] === '') ? createMarker() :\n                                        document.createTextNode(strings[i]),\n                  node);\n              this.parts.push({type: 'node', index: ++index});\n            }\n            // If there's no text, we must insert a comment to mark our place.\n            // Else, we can trust it will stick around after cloning.\n            if (strings[lastIndex] === '') {\n              parent.insertBefore(createMarker(), node);\n              nodesToRemove.push(node);\n            } else {\n              (node as Text).data = strings[lastIndex];\n            }\n            // We have a part for each match found\n            partIndex += lastIndex;\n          }\n        } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n          if ((node as Comment).data === marker) {\n            const parent = node.parentNode!;\n            // Add a new marker node to be the startNode of the Part if any of\n            // the following are true:\n            //  * We don't have a previousSibling\n            //  * The previousSibling is already the start of a previous part\n            if (node.previousSibling === null || index === lastPartIndex) {\n              index++;\n              parent.insertBefore(createMarker(), node);\n            }\n            lastPartIndex = index;\n            this.parts.push({type: 'node', index});\n            // If we don't have a nextSibling, keep this node so we have an end.\n            // Else, we can remove it to save future costs.\n            if (node.nextSibling === null) {\n              (node as Comment).data = '';\n            } else {\n              nodesToRemove.push(node);\n              index--;\n            }\n            partIndex++;\n          } else {\n            let i = -1;\n            while ((i = (node as Comment).data!.indexOf(marker, i + 1)) !==\n                   -1) {\n              // Comment node has a binding marker inside, make an inactive part\n              // The binding won't work, but subsequent bindings will\n              // TODO (justinfagnani): consider whether it's even worth it to\n              // make bindings in comments work\n              this.parts.push({type: 'node', index: -1});\n            }\n          }\n        }\n      }\n    };\n    _prepareTemplate(element);\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  type: 'node',\n  index: number\n}|{type: 'attribute', index: number, name: string, strings: string[]};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  _parts: Array<Part|undefined> = [];\n  processor: TemplateProcessor;\n  options: RenderOptions;\n  template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: unknown[]) {\n    let i = 0;\n    for (const part of this._parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this._parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // When using the Custom Elements polyfill, clone the node, rather than\n    // importing it, to keep the fragment in the template's document. This\n    // leaves the fragment inert so custom elements won't upgrade and\n    // potentially modify their contents by creating a polyfilled ShadowRoot\n    // while we traverse the tree.\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const parts = this.template.parts;\n    let partIndex = 0;\n    let nodeIndex = 0;\n    const _prepareInstance = (fragment: DocumentFragment) => {\n      // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n      // null\n      const walker = document.createTreeWalker(\n          fragment,\n          133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n          null,\n          false);\n      let node = walker.nextNode();\n      // Loop through all the nodes and parts of a template\n      while (partIndex < parts.length && node !== null) {\n        const part = parts[partIndex];\n        // Consecutive Parts may have the same node index, in the case of\n        // multiple bound attributes on an element. So each iteration we either\n        // increment the nodeIndex, if we aren't on a node with a part, or the\n        // partIndex if we are. By not incrementing the nodeIndex when we find a\n        // part, we allow for the next part to be associated with the current\n        // node if neccessasry.\n        if (!isTemplatePartActive(part)) {\n          this._parts.push(undefined);\n          partIndex++;\n        } else if (nodeIndex === part.index) {\n          if (part.type === 'node') {\n            const part = this.processor.handleTextExpression(this.options);\n            part.insertAfterNode(node.previousSibling!);\n            this._parts.push(part);\n          } else {\n            this._parts.push(...this.processor.handleAttributeExpressions(\n                node as Element, part.name, part.strings, this.options));\n          }\n          partIndex++;\n        } else {\n          nodeIndex++;\n          if (node.nodeName === 'TEMPLATE') {\n            _prepareInstance((node as HTMLTemplateElement).content);\n          }\n          node = walker.nextNode();\n        }\n      }\n    };\n    _prepareInstance(fragment);\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  strings: TemplateStringsArray;\n  values: unknown[];\n  type: string;\n  processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: unknown[], type: string,\n      processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const endIndex = this.strings.length - 1;\n    let html = '';\n    for (let i = 0; i < endIndex; i++) {\n      const s = this.strings[i];\n      // This exec() call does two things:\n      // 1) Appends a suffix to the bound attribute name to opt out of special\n      // attribute value parsing that IE11 and Edge do, like for style and\n      // many SVG attributes. The Template class also appends the same suffix\n      // when looking up attributes to create Parts.\n      // 2) Adds an unquoted-attribute-safe marker for the first expression in\n      // an attribute. Subsequent attribute expressions will use node markers,\n      // and this is safe since attributes with multiple expressions are\n      // guaranteed to be quoted.\n      const match = lastAttributeNameRegex.exec(s);\n      if (match) {\n        // We're starting a new bound attribute.\n        // Add the safe attribute suffix, and use unquoted-attribute-safe\n        // marker.\n        html += s.substr(0, match.index) + match[1] + match[2] +\n            boundAttributeSuffix + match[3] + marker;\n      } else {\n        // We're either in a bound node, or trailing bound attribute.\n        // Either way, nodeMarker is safe to use.\n        html += s + nodeMarker;\n      }\n    }\n    return html + this.strings[endIndex];\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    template.innerHTML = this.getHTML();\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|Symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\n\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n  element: Element;\n  name: string;\n  strings: string[];\n  parts: AttributePart[];\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: string[]) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      this.parts[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = this.parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (v != null &&\n            (Array.isArray(v) ||\n             // tslint:disable-next-line:no-any\n             typeof v !== 'string' && (v as any)[Symbol.iterator])) {\n          for (const t of v as Iterable<unknown>) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        } else {\n          text += typeof v === 'string' ? v : String(v);\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\nexport class AttributePart implements Part {\n  committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(comitter: AttributeCommitter) {\n    this.committer = comitter;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\nexport class NodePart implements Part {\n  options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  _pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Inserts this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n   * its next sibling must be static, unchanging nodes such as those that appear\n   * in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part._insert(this.startNode = createMarker());\n    part._insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Appends this part after `ref`\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref._insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this._pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this._pendingValue)) {\n      const directive = this._pendingValue;\n      this._pendingValue = noChange;\n      directive(this);\n    }\n    const value = this._pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this._commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this._commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this._commitNode(value);\n    } else if (\n        Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        (value as any)[Symbol.iterator]) {\n      this._commitIterable(value as Iterable<unknown>);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this._commitText(value);\n    }\n  }\n\n  private _insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private _commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this._insert(value);\n    this.value = value;\n  }\n\n  private _commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = value as string;\n    } else {\n      this._commitNode(document.createTextNode(\n          typeof value === 'string' ? value : String(value)));\n    }\n    this.value = value;\n  }\n\n  private _commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this._commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private _commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart!.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  element: Element;\n  name: string;\n  strings: string[];\n  value: unknown = undefined;\n  _pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: string[]) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this._pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this._pendingValue)) {\n      const directive = this._pendingValue;\n      this._pendingValue = noChange;\n      directive(this);\n    }\n    if (this._pendingValue === noChange) {\n      return;\n    }\n    const value = !!this._pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n    }\n    this.value = value;\n    this._pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  single: boolean;\n\n  constructor(element: Element, name: string, strings: string[]) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // tslint:disable-next-line:no-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\ntry {\n  const options = {\n    get capture() {\n      eventOptionsSupported = true;\n      return false;\n    }\n  };\n  // tslint:disable-next-line:no-any\n  window.addEventListener('test', options as any, options);\n  // tslint:disable-next-line:no-any\n  window.removeEventListener('test', options as any, options);\n} catch (_e) {\n}\n\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  element: Element;\n  eventName: string;\n  eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  _options?: AddEventListenerOptions;\n  _pendingValue: undefined|EventHandlerWithOptions = undefined;\n  _boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this._boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this._pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this._pendingValue)) {\n      const directive = this._pendingValue;\n      this._pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this._pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this._pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this._boundHandleEvent, this._options);\n    }\n    if (shouldAddListener) {\n      this._options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this._boundHandleEvent, this._options);\n    }\n    this.value = newListener;\n    this._pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): Part[] {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const comitter = new PropertyCommitter(element, name.slice(1), strings);\n      return comitter.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const comitter = new AttributeCommitter(element, name, strings);\n    return comitter.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behaviour, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport type templateCache = {\n  stringsArray: WeakMap<TemplateStringsArray, Template>;\n  keyString: Map<string, Template>;\n};\n\nexport const templateCaches = new Map<string, templateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\nimport {TemplateResult} from './template-result.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: TemplateResult,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {DirectiveFn} from '../lib/directive.js';\nimport {createMarker, directive, NodePart, Part, removeNodes, reparentNodes} from '../lit-html.js';\n\nexport type KeyFn<T> = (item: T, index: number) => unknown;\nexport type ItemTemplate<T> = (item: T, index: number) => unknown;\n\n// Helper functions for manipulating parts\n// TODO(kschaaf): Refactor into Part API?\nconst createAndInsertPart =\n    (containerPart: NodePart, beforePart?: NodePart): NodePart => {\n      const container = containerPart.startNode.parentNode as Node;\n      const beforeNode = beforePart === undefined ? containerPart.endNode :\n                                                    beforePart.startNode;\n      const startNode = container.insertBefore(createMarker(), beforeNode);\n      container.insertBefore(createMarker(), beforeNode);\n      const newPart = new NodePart(containerPart.options);\n      newPart.insertAfterNode(startNode);\n      return newPart;\n    };\n\nconst updatePart = (part: NodePart, value: unknown) => {\n  part.setValue(value);\n  part.commit();\n  return part;\n};\n\nconst insertPartBefore =\n    (containerPart: NodePart, part: NodePart, ref?: NodePart) => {\n      const container = containerPart.startNode.parentNode as Node;\n      const beforeNode = ref ? ref.startNode : containerPart.endNode;\n      const endNode = part.endNode.nextSibling;\n      if (endNode !== beforeNode) {\n        reparentNodes(container, part.startNode, endNode, beforeNode);\n      }\n    };\n\nconst removePart = (part: NodePart) => {\n  removeNodes(\n      part.startNode.parentNode!, part.startNode, part.endNode.nextSibling);\n};\n\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list: unknown[], start: number, end: number) => {\n  const map = new Map();\n  for (let i = start; i <= end; i++) {\n    map.set(list[i], i);\n  }\n  return map;\n};\n\n// Stores previous ordered list of parts and map of key to index\nconst partListCache = new WeakMap<NodePart, (NodePart | null)[]>();\nconst keyListCache = new WeakMap<NodePart, unknown[]>();\n\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * amd removals.\n *\n * IMPORTANT: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport const repeat =\n    directive(\n        <T>(items: Iterable<T>,\n            keyFnOrTemplate: KeyFn<T>|ItemTemplate<T>,\n            template?: ItemTemplate<T>):\n            DirectiveFn => {\n              let keyFn: KeyFn<T>;\n              if (template === undefined) {\n                template = keyFnOrTemplate;\n              } else if (keyFnOrTemplate !== undefined) {\n                keyFn = keyFnOrTemplate as KeyFn<T>;\n              }\n\n              return (containerPart: Part): void => {\n                if (!(containerPart instanceof NodePart)) {\n                  throw new Error('repeat can only be used in text bindings');\n                }\n                // Old part & key lists are retrieved from the last update\n                // (associated with the part for this instance of the directive)\n                const oldParts = partListCache.get(containerPart) || [];\n                const oldKeys = keyListCache.get(containerPart) || [];\n\n                // New part list will be built up as we go (either reused from\n                // old parts or created for new keys in this update). This is\n                // saved in the above cache at the end of the update.\n                const newParts: NodePart[] = [];\n\n                // New value list is eagerly generated from items along with a\n                // parallel array indicating its key.\n                const newValues: unknown[] = [];\n                const newKeys: unknown[] = [];\n                let index = 0;\n                for (const item of items) {\n                  newKeys[index] = keyFn ? keyFn(item, index) : index;\n                  newValues[index] = template !(item, index);\n                  index++;\n                }\n\n                // Maps from key to index for current and previous update; these\n                // are generated lazily only when needed as a performance\n                // optimization, since they are only required for multiple\n                // non-contiguous changes in the list, which are less common.\n                let newKeyToIndexMap!: Map<unknown, number>;\n                let oldKeyToIndexMap!: Map<unknown, number>;\n\n                // Head and tail pointers to old parts and new values\n                let oldHead = 0;\n                let oldTail = oldParts.length - 1;\n                let newHead = 0;\n                let newTail = newValues.length - 1;\n\n                // Overview of O(n) reconciliation algorithm (general approach\n                // based on ideas found in ivi, vue, snabbdom, etc.):\n                //\n                // * We start with the list of old parts and new values (and\n                // arrays of\n                //   their respective keys), head/tail pointers into each, and\n                //   we build up the new list of parts by updating (and when\n                //   needed, moving) old parts or creating new ones. The initial\n                //   scenario might look like this (for brevity of the diagrams,\n                //   the numbers in the array reflect keys associated with the\n                //   old parts or new values, although keys and parts/values are\n                //   actually stored in parallel arrays indexed using the same\n                //   head/tail pointers):\n                //\n                //      oldHead v                 v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n                //   item order\n                //      newHead ^                 ^ newTail\n                //\n                // * Iterate old & new lists from both sides, updating,\n                // swapping, or\n                //   removing parts at the head/tail locations until neither\n                //   head nor tail can move.\n                //\n                // * Example below: keys at head pointers match, so update old\n                // part 0 in-\n                //   place (no need to move it) and record part 0 in the\n                //   `newParts` list. The last thing we do is advance the\n                //   `oldHead` and `newHead` pointers (will be reflected in the\n                //   next diagram).\n                //\n                //      oldHead v                 v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n                //   and newKeys:  [0, 2, 1, 4, 3, 7, 6]    advance both oldHead\n                //   & newHead\n                //      newHead ^                 ^ newTail\n                //\n                // * Example below: head pointers don't match, but tail pointers\n                // do, so\n                //   update part 6 in place (no need to move it), and record\n                //   part 6 in the `newParts` list. Last, advance the `oldTail`\n                //   and `oldHead` pointers.\n                //\n                //         oldHead v              v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n                //   and newKeys:  [0, 2, 1, 4, 3, 7, 6]    advance both oldTail\n                //   & newTail\n                //         newHead ^              ^ newTail\n                //\n                // * If neither head nor tail match; next check if one of the\n                // old head/tail\n                //   items was removed. We first need to generate the reverse\n                //   map of new keys to index (`newKeyToIndexMap`), which is\n                //   done once lazily as a performance optimization, since we\n                //   only hit this case if multiple non-contiguous changes were\n                //   made. Note that for contiguous removal anywhere in the\n                //   list, the head and tails would advance from either end and\n                //   pass each other before we get to this case and removals\n                //   would be handled in the final while loop without needing to\n                //   generate the map.\n                //\n                // * Example below: The key at `oldTail` was removed (no longer\n                // in the\n                //   `newKeyToIndexMap`), so remove that part from the DOM and\n                //   advance just the `oldTail` pointer.\n                //\n                //         oldHead v           v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map; remove\n                //   5 and newKeys:  [0, 2, 1, 4, 3, 7, 6]    advance oldTail\n                //         newHead ^           ^ newTail\n                //\n                // * Once head and tail cannot move, any mismatches are due to\n                // either new or\n                //   moved items; if a new key is in the previous \"old key to\n                //   old index\" map, move the old part to the new location,\n                //   otherwise create and insert a new part. Note that when\n                //   moving an old part we null its position in the oldParts\n                //   array if it lies between the head and tail so we know to\n                //   skip it when the pointers get there.\n                //\n                // * Example below: neither head nor tail match, and neither\n                // were removed;\n                //   so find the `newHead` key in the `oldKeyToIndexMap`, and\n                //   move that old part's DOM into the next head position\n                //   (before `oldParts[oldHead]`). Last, null the part in the\n                //   `oldPart` array since it was somewhere in the remaining\n                //   oldParts still to be scanned (between the head and tail\n                //   pointers) so that we know to skip that old part on future\n                //   iterations.\n                //\n                //         oldHead v        v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck; update & move 2\n                //   into place newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance\n                //   newHead\n                //         newHead ^           ^ newTail\n                //\n                // * Note that for moves/insertions like the one above, a part\n                // inserted at\n                //   the head pointer is inserted before the current\n                //   `oldParts[oldHead]`, and a part inserted at the tail\n                //   pointer is inserted before `newParts[newTail+1]`. The\n                //   seeming asymmetry lies in the fact that new parts are moved\n                //   into place outside in, so to the right of the head pointer\n                //   are old parts, and to the right of the tail pointer are new\n                //   parts.\n                //\n                // * We always restart back from the top of the algorithm,\n                // allowing matching\n                //   and simple updates in place to continue...\n                //\n                // * Example below: the head pointers once again match, so\n                // simply update\n                //   part 1 and record it in the `newParts` array.  Last,\n                //   advance both head pointers.\n                //\n                //         oldHead v        v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched; update 1\n                //   and newKeys:  [0, 2, 1, 4, 3, 7, 6]    advance both oldHead\n                //   & newHead\n                //            newHead ^        ^ newTail\n                //\n                // * As mentioned above, items that were moved as a result of\n                // being stuck\n                //   (the final else clause in the code below) are marked with\n                //   null, so we always advance old pointers over these so we're\n                //   comparing the next actual old value on either end.\n                //\n                // * Example below: `oldHead` is null (already placed in\n                // newParts), so\n                //   advance `oldHead`.\n                //\n                //            oldHead v     v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6] // old head already used;\n                //   advance newParts: [0, 2, 1,  ,  ,  , 6] // oldHead newKeys:\n                //   [0, 2, 1, 4, 3, 7, 6]\n                //               newHead ^     ^ newTail\n                //\n                // * Note it's not critical to mark old parts as null when they\n                // are moved\n                //   from head to tail or tail to head, since they will be\n                //   outside the pointer range and never visited again.\n                //\n                // * Example below: Here the old tail key matches the new head\n                // key, so\n                //   the part at the `oldTail` position and move its DOM to the\n                //   new head position (before `oldParts[oldHead]`). Last,\n                //   advance `oldTail` and `newHead` pointers.\n                //\n                //               oldHead v  v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n                //   head: update newKeys:  [0, 2, 1, 4, 3, 7, 6]   & move 4,\n                //   advance oldTail & newHead\n                //               newHead ^     ^ newTail\n                //\n                // * Example below: Old and new head keys match, so update the\n                // old head\n                //   part in place, and advance the `oldHead` and `newHead`\n                //   pointers.\n                //\n                //               oldHead v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n                //   and advance newKeys:  [0, 2, 1, 4, 3, 7, 6]    oldHead &\n                //   newHead\n                //                  newHead ^  ^ newTail\n                //\n                // * Once the new or old pointers move past each other then all\n                // we have\n                //   left is additions (if old list exhausted) or removals (if\n                //   new list exhausted). Those are handled in the final while\n                //   loops at the end.\n                //\n                // * Example below: `oldHead` exceeded `oldTail`, so we're done\n                // with the\n                //   main loop.  Create the remaining part and insert it at the\n                //   new head position, and the update is complete.\n                //\n                //                   (oldHead > oldTail)\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n                //                     newHead ^ newTail\n                //\n                // * Note that the order of the if/else clauses is not important\n                // to the\n                //   algorithm, as long as the null checks come first (to ensure\n                //   we're always working on valid old parts) and that the final\n                //   else clause comes last (since that's where the expensive\n                //   moves occur). The order of remaining clauses is is just a\n                //   simple guess at which cases will be most common.\n                //\n                // * TODO(kschaaf) Note, we could calculate the longest\n                // increasing\n                //   subsequence (LIS) of old items in new position, and only\n                //   move those not in the LIS set. However that costs O(nlogn)\n                //   time and adds a bit more code, and only helps make rare\n                //   types of mutations require fewer moves. The above handles\n                //   removes, adds, reversal, swaps, and single moves of\n                //   contiguous items in linear time, in the minimum number of\n                //   moves. As the number of multiple moves where LIS might help\n                //   approaches a random shuffle, the LIS optimization becomes\n                //   less helpful, so it seems not worth the code at this point.\n                //   Could reconsider if a compelling case arises.\n\n                while (oldHead <= oldTail && newHead <= newTail) {\n                  if (oldParts[oldHead] === null) {\n                    // `null` means old part at head has already been used\n                    // below; skip\n                    oldHead++;\n                  } else if (oldParts[oldTail] === null) {\n                    // `null` means old part at tail has already been used\n                    // below; skip\n                    oldTail--;\n                  } else if (oldKeys[oldHead] === newKeys[newHead]) {\n                    // Old head matches new head; update in place\n                    newParts[newHead] =\n                        updatePart(oldParts[oldHead]!, newValues[newHead]);\n                    oldHead++;\n                    newHead++;\n                  } else if (oldKeys[oldTail] === newKeys[newTail]) {\n                    // Old tail matches new tail; update in place\n                    newParts[newTail] =\n                        updatePart(oldParts[oldTail]!, newValues[newTail]);\n                    oldTail--;\n                    newTail--;\n                  } else if (oldKeys[oldHead] === newKeys[newTail]) {\n                    // Old head matches new tail; update and move to new tail\n                    newParts[newTail] =\n                        updatePart(oldParts[oldHead]!, newValues[newTail]);\n                    insertPartBefore(\n                        containerPart,\n                        oldParts[oldHead]!,\n                        newParts[newTail + 1]);\n                    oldHead++;\n                    newTail--;\n                  } else if (oldKeys[oldTail] === newKeys[newHead]) {\n                    // Old tail matches new head; update and move to new head\n                    newParts[newHead] =\n                        updatePart(oldParts[oldTail]!, newValues[newHead]);\n                    insertPartBefore(\n                        containerPart, oldParts[oldTail]!, oldParts[oldHead]!);\n                    oldTail--;\n                    newHead++;\n                  } else {\n                    if (newKeyToIndexMap === undefined) {\n                      // Lazily generate key-to-index maps, used for removals &\n                      // moves below\n                      newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n                      oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n                    }\n                    if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n                      // Old head is no longer in new list; remove\n                      removePart(oldParts[oldHead]!);\n                      oldHead++;\n                    } else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n                      // Old tail is no longer in new list; remove\n                      removePart(oldParts[oldTail]!);\n                      oldTail--;\n                    } else {\n                      // Any mismatches at this point are due to additions or\n                      // moves; see if we have an old part we can reuse and move\n                      // into place\n                      const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n                      const oldPart =\n                          oldIndex !== undefined ? oldParts[oldIndex] : null;\n                      if (oldPart === null) {\n                        // No old part for this value; create a new one and\n                        // insert it\n                        const newPart = createAndInsertPart(\n                            containerPart, oldParts[oldHead]!);\n                        updatePart(newPart, newValues[newHead]);\n                        newParts[newHead] = newPart;\n                      } else {\n                        // Reuse old part\n                        newParts[newHead] =\n                            updatePart(oldPart, newValues[newHead]);\n                        insertPartBefore(\n                            containerPart, oldPart, oldParts[oldHead]!);\n                        // This marks the old part as having been used, so that\n                        // it will be skipped in the first two checks above\n                        oldParts[oldIndex as number] = null;\n                      }\n                      newHead++;\n                    }\n                  }\n                }\n                // Add parts for any remaining new values\n                while (newHead <= newTail) {\n                  // For all remaining additions, we insert before last new\n                  // tail, since old pointers are no longer valid\n                  const newPart = createAndInsertPart(\n                      containerPart, newParts[newTail + 1]!);\n                  updatePart(newPart, newValues[newHead]);\n                  newParts[newHead++] = newPart;\n                }\n                // Remove any remaining unused old parts\n                while (oldHead <= oldTail) {\n                  const oldPart = oldParts[oldHead++];\n                  if (oldPart !== null) {\n                    removePart(oldPart);\n                  }\n                }\n                // Save order of new parts for next round\n                partListCache.set(containerPart, newParts);\n                keyListCache.set(containerPart, newKeys);\n              };\n            }) as\n    <T>(items: Iterable<T>,\n        keyFnOrTemplate: KeyFn<T>|ItemTemplate<T>,\n        template?: ItemTemplate<T>) => DirectiveFn;\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributePart, directive, Part, PropertyPart} from '../lit-html.js';\n\n\n// On IE11, classList.toggle doesn't accept a second argument.\n// Since this is so minor, we just polyfill it.\nif (window.navigator.userAgent.match('Trident')) {\n  DOMTokenList.prototype.toggle = function(\n      token: string, force?: boolean|undefined) {\n    if (force === undefined || force) {\n      this.add(token);\n    } else {\n      this.remove(token);\n    }\n    return force === undefined ? true : force;\n  };\n}\n\nexport interface ClassInfo {\n  [name: string]: string|boolean|number;\n}\n\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst classMapCache = new WeakMap();\n\n/**\n * Stores AttributeParts that have had static classes applied (e.g. `foo` in\n * class=\"foo ${classMap()}\"). Static classes are applied only the first time\n * the directive is run on a part.\n */\n// Note, could be a WeakSet, but prefer not requiring this polyfill.\nconst classMapStatics = new WeakMap();\n\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `classList` if the property value is truthy; if the property value\n * is falsey, the property name is removed from the element's `classList`. For\n * example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive((classInfo: ClassInfo) => (part: Part) => {\n  if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n      part.committer.name !== 'class' || part.committer.parts.length > 1) {\n    throw new Error(\n        'The `classMap` directive must be used in the `class` attribute ' +\n        'and must be the only part in the attribute.');\n  }\n  // handle static classes\n  if (!classMapStatics.has(part)) {\n    part.committer.element.className = part.committer.strings.join(' ');\n    classMapStatics.set(part, true);\n  }\n  // remove old classes that no longer apply\n  const oldInfo = classMapCache.get(part);\n  for (const name in oldInfo) {\n    if (!(name in classInfo)) {\n      part.committer.element.classList.remove(name);\n    }\n  }\n  // add new classes\n  for (const name in classInfo) {\n    if (!oldInfo || (oldInfo[name] !== classInfo[name])) {\n      // We explicitly want a loose truthy check here because\n      // it seems more convenient that '' and 0 are skipped.\n      part.committer.element.classList.toggle(name, Boolean(classInfo[name]));\n    }\n  }\n  classMapCache.set(part, classInfo);\n});\n","const debounce = (fn, interval) => {\n  let timerId;\n  return () => {\n    clearTimeout(timerId);\n    const context = this;\n    const args = arguments;\n    timerId = setTimeout(() => {\n      fn.apply(context, args);\n    }, interval);\n  };\n};\n\nexport default debounce;\n","import { html, render, svg } from 'lit-html';\nimport { repeat } from 'lit-html/directives/repeat';\nimport { classMap } from 'lit-html/directives/class-map';\nimport debounce from './_debounce';\nimport { Store, TsItem } from './_store';\n\nexport default class App {\n  store: Partial<Store>;\n  list: TsItem[];\n  selectedNo: number;\n  root: HTMLElement;\n  cpPickerRowHeight: number;\n  cpPickerRows: number;\n\n  constructor(store) {\n    this.store = store;\n    this.store.on('change', () => {\n      this.list = this.store.get();\n      this.__updateCustomProperty();\n      this.__render();\n    });\n\n    this.list = this.store.get();\n    this.selectedNo = -1;\n    this.handleAddClick = this.handleAddClick.bind(this);\n    this.handleLayerClick = this.handleLayerClick.bind(this);\n    this.handleSaveClick = this.handleSaveClick.bind(this);\n    this.handleHourScroll = this.handleHourScroll.bind(this);\n    this.handleTimeScroll = this.handleTimeScroll.bind(this);\n    this.handleDeleteClick = this.handleDeleteClick.bind(this);\n    this.handleTimeClick = this.handleTimeClick.bind(this);\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.handleHourScrollEnd = debounce(\n      this.handleHourScrollEnd.bind(this),\n      100\n    );\n    this.handleTimeScrollEnd = debounce(\n      this.handleTimeScrollEnd.bind(this),\n      100\n    );\n    this.handleHourItemTap = this.handleHourItemTap.bind(this);\n    this.handleTimeItemTap = this.handleTimeItemTap.bind(this);\n    this.handleCheckClick = this.handleCheckClick.bind(this);\n\n    this.root = document.querySelector('#app');\n    const style = window.getComputedStyle(this.root);\n    this.cpPickerRowHeight = Number(\n      style.getPropertyValue('--ts-picker-row-height').split('px')[0]\n    );\n    this.cpPickerRows = Number(style.getPropertyValue('--ts-picker-rows'));\n    this.__updateCustomProperty();\n  }\n\n  __template() {\n    return html`\n      <div class=\"container\">\n        <div class=\"head\">\n          <div class=\"head__icon\">\n            ${svg`\n              <svg viewBox=\"0 0 373.929 500\">\n                <g transform=\"translate(-64.548 0)\">\n                  <path class=\"cls-1\" d=\"M256,343.319A23.283,23.283,0,0,0,269.556,301.1l-8.42-112.928c-.225-3.032-2.456-5.37-5.137-5.37s-4.911,2.338-5.136,5.37L242.443,301.1A23.283,23.283,0,0,0,256,343.319Z\" transform=\"translate(-4.487 -6.241)\"/>\n                  <path class=\"cls-2\" d=\"M423.778,242.355A187.656,187.656,0,0,0,96.49,210.841a184.458,184.458,0,0,0-17.244,175.9A186.922,186.922,0,0,0,195.923,491.66a187.665,187.665,0,0,0,210.611-73.41,184.437,184.437,0,0,0,17.243-175.9ZM251.512,173.2A142.652,142.652,0,0,1,369.69,235.533a140.617,140.617,0,0,1,13.133,134.026,143.022,143.022,0,0,1-249.486,24A140.609,140.609,0,0,1,120.2,259.539,142.568,142.568,0,0,1,251.512,173.2Z\" transform=\"translate(0)\"/>\n                  <path class=\"cls-1\" d=\"M431.28,140.634l-28.532-23.956-29.969,35.716,28.54,23.956Z\" transform=\"translate(-8.974 -3.095)\"/>\n                  <path class=\"cls-2\" d=\"M228.578,99.74v16.938h54.843V99.74a53.653,53.653,0,1,0-54.843,0Zm0-30.664V83c-.334-.308-.668-.617-.994-.943a40.189,40.189,0,1,1,56.839,0c-.334.326-.668.635-1,.943V69.076Z\" transform=\"translate(-4.487)\"/>\n                </g>\n              </svg>\n            `}\n          </div>\n        </div>\n        <div class=\"body\">\n          <div class=\"list\">\n            ${repeat(this.list, (item, i) => {\n              const date = new Date(item.time);\n              return html`\n                <div\n                  class=\"${classMap({\n                    list__item: true,\n                    item: true,\n                    'item--selected': this.selectedNo === i\n                  })}\"\n                >\n                  <div\n                    class=\"${classMap({\n                      item__check: true,\n                      'item__check--checked': !!item.checked\n                    })}\"\n                    index=\"${i}\"\n                    @click=\"${this.handleCheckClick}\"\n                  >\n                    <i class=\"material-icons\">check</i>\n                  </div>\n                  <div\n                    class=\"item__time\"\n                    @click=\"${this.handleTimeClick}\"\n                    index=\"${i}\"\n                  >\n                    ${String(date.getHours()).padStart(2, '0')}:${String(\n                      date.getMinutes()\n                    ).padStart(2, '0')}\n                  </div>\n                  <div class=\"item__text\">\n                    <input\n                      type=\"text\"\n                      value=\"${item.text}\"\n                      placeholder=\"テキストを入力\"\n                      index=\"${i}\"\n                      @change=\"${this.handleTextChange}\"\n                    />\n                  </div>\n                  <div\n                    class=\"item__delete\"\n                    index=\"${i}\"\n                    @click=\"${this.handleDeleteClick}\"\n                  >\n                    <i class=\"material-icons\">delete_outline</i>\n                  </div>\n                </div>\n              `;\n            })}\n          </div>\n          <div class=\"add\" @click=\"${this.handleAddClick}\">\n            <i class=\"material-icons\">add_circle</i>\n          </div>\n        </div>\n        <div class=\"tail\"></div>\n        <div\n          class=\"${classMap({\n            sheet: true,\n            'sheet--active': this.selectedNo > -1\n          })}\"\n          @click=\"${this.handleLayerClick}\"\n        >\n          <div class=\"sheet__container\">\n            <div class=\"wrap\">\n              <div class=\"hour\" @scroll=\"${this.handleHourScroll}\">\n                ${this.__getDummyPickerHourItem()}\n                ${repeat(\n                  Array.from({ length: 24 }, (v, i) => i),\n                  (item, i) => html`\n                    <div\n                      class=\"hour__item\"\n                      index=\"${i}\"\n                      @click=\"${this.handleHourItemTap}\"\n                    >\n                      ${item}\n                    </div>\n                  `\n                )}\n                ${this.__getDummyPickerHourItem()}\n              </div>\n              <div class=\"time\" @scroll=\"${this.handleTimeScroll}\">\n                ${this.__getDummyPickerTimeItem()}\n                ${repeat(\n                  Array.from({ length: 60 }, (v, i) => i),\n                  (item, i) => html`\n                    <div\n                      class=\"time__item\"\n                      index=\"${i}\"\n                      @click=\"${this.handleTimeItemTap}\"\n                    >\n                      ${item}\n                    </div>\n                  `\n                )}\n                ${this.__getDummyPickerTimeItem()}\n              </div>\n            </div>\n            <div class=\"save\" @click=\"${this.handleSaveClick}\">save</div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  __render() {\n    render(this.__template(), document.getElementById('app'));\n  }\n\n  /**\n   * 時間の押下時\n   * @param e\n   */\n  handleTimeClick(e) {\n    this.selectedNo = Number(e.currentTarget.getAttribute('index'));\n    const date = new Date(this.list[this.selectedNo].time);\n    this.__moveHourPicker(date.getHours());\n    this.__moveTimePicker(date.getMinutes());\n    this.__render();\n  }\n\n  /**\n   * 追加押下時\n   */\n  handleAddClick() {\n    this.store.add({\n      time: Date.now(),\n      text: ''\n    });\n  }\n\n  /**\n   * 保存押下時\n   */\n  handleSaveClick() {\n    const selectedNo = this.selectedNo;\n    this.selectedNo = -1;\n    const hour = Math.round(\n      document.querySelector('.hour').scrollTop / this.cpPickerRowHeight\n    );\n    const time = Math.round(\n      document.querySelector('.time').scrollTop / this.cpPickerRowHeight\n    );\n    const date = new Date();\n    date.setHours(hour);\n    date.setMinutes(time);\n    this.store.update(selectedNo, {\n      time: date.getTime()\n    });\n  }\n\n  /**\n   * Sheetのレイヤー押下時\n   * @param e\n   */\n  handleLayerClick(e) {\n    if (e.target.classList.contains('sheet')) {\n      this.selectedNo = -1;\n      this.__render();\n    }\n  }\n\n  handleHourScroll(e) {\n    // e.target.scrollTop\n    // console.log(e.target.scrollTop / this.cpPickerRowHeight);\n    this.handleHourScrollEnd(e);\n  }\n\n  handleTimeScroll(e) {\n    // e.target.scrollTop\n    // console.log(e.target.scrollTop / this.cpPickerRowHeight);\n    this.handleTimeScrollEnd(e);\n  }\n\n  handleHourScrollEnd(e) {\n    // console.log('Hour End', this.selectedNo);\n  }\n\n  handleTimeScrollEnd(e) {\n    // console.log('Time End', this.selectedNo);\n  }\n\n  /**\n   * 削除ボタン押下時\n   * @param e\n   */\n  handleDeleteClick(e) {\n    e.stopPropagation();\n    const index = Number(e.currentTarget.getAttribute('index'));\n    this.store.remove(index);\n  }\n\n  /**\n   * テキストの変更時\n   * @param e\n   */\n  handleTextChange(e) {\n    const index = Number(e.currentTarget.getAttribute('index'));\n    this.store.update(index, {\n      text: e.target.value\n    });\n  }\n\n  /**\n   * HourPickerの押下時\n   * @param e\n   */\n  handleHourItemTap(e) {\n    const index = Number(e.currentTarget.getAttribute('index'));\n    this.__moveHourPicker(index);\n  }\n\n  /**\n   * TimePickerの押下時\n   * @param e\n   */\n  handleTimeItemTap(e) {\n    const index = Number(e.currentTarget.getAttribute('index'));\n    this.__moveTimePicker(index);\n  }\n\n  /**\n   * チェックボックスの押下時\n   * @param e\n   */\n  handleCheckClick(e) {\n    const index = Number(e.currentTarget.getAttribute('index'));\n    this.store.update(index, {\n      checked: !this.list[index].checked\n    });\n  }\n\n  /**\n   * Custom Propertyを更新\n   * @private\n   */\n  __updateCustomProperty() {\n    const now = new Date().getTime();\n    const endedList = this.list.filter(v => v.time < now);\n    this.root.style.setProperty('--ts-ended-bar-height', `${endedList.length}`);\n    // listの要素数を設定\n    this.root.style.setProperty('--ts-list-rows', `${this.list.length}`);\n  }\n\n  /**\n   * HourPickerの更新\n   * @param index\n   * @private\n   */\n  __moveHourPicker(index) {\n    this.root\n      .querySelector('.hour')\n      .scrollTo(0, index * this.cpPickerRowHeight);\n  }\n\n  /**\n   * TimePickerの更新\n   * @param index\n   * @private\n   */\n  __moveTimePicker(index) {\n    this.root\n      .querySelector('.time')\n      .scrollTo(0, index * this.cpPickerRowHeight);\n  }\n\n  /**\n   * pickerのダミー用のtemplateを取得\n   * @private\n   */\n  __getDummyPickerHourItem() {\n    return html`\n      ${repeat(\n        Array.from({ length: Math.floor(this.cpPickerRows / 2) }, (v, i) => i),\n        () => html`\n          <div class=\"hour__item hour__item--dummy\"></div>\n        `\n      )}\n    `;\n  }\n\n  /**\n   * pickerのダミー用のtemplateを取得\n   * @private\n   */\n  __getDummyPickerTimeItem() {\n    return html`\n      ${repeat(\n        Array.from({ length: Math.floor(this.cpPickerRows / 2) }, (v, i) => i),\n        () => html`\n          <div class=\"time__item time__item--dummy\"></div>\n        `\n      )}\n    `;\n  }\n}\n","import store from './_store';\nimport App from './_app';\n\nPromise.resolve()\n  .then(() => store.init())\n  .then(() => {\n    const app = new App(store);\n    app.__render();\n  });\n"]}